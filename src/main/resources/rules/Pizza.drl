package pl.poznan.put.cs.si.puttalky
 
import pl.poznan.put.cs.si.puttalky.Fakt;
import pl.poznan.put.cs.si.puttalky.Zamowienie; 
import pl.poznan.put.cs.si.puttalky.Ciasto;
import pl.poznan.put.cs.si.puttalky.Dodatek;
import pl.poznan.put.cs.si.puttalky.BazaWiedzy;
import java.util.Set
import java.util.Arrays;


rule "start"
	salience 4
	
	when
		not Fakt(nazwa=="start")
		zamowienie : Zamowienie()
	then
		zamowienie.powitanie();
		System.out.println();
		System.out.println();
		insert(new Fakt("start", "0"));
end

rule "zamowienie czy porada"
    salience 2

    when
        not Fakt(nazwa == "dodatek")
        not Fakt(nazwa == "ciasto")
        not Fakt(nazwa == "wybor")
        wybor: Wybor()
        parser: Parser()
    then
        wybor.setMonit("Czy chciałbyś zamówić pizzę, czy potrzebujesz porady?");
        wybor.zadajPytanie();
        parser.przetworzOdpowiedz();
        String res = wybor.parseAnswer(parser.getSlowaKluczowe());

        insert(new Fakt("wybor", res));
    end

rule "Podaj dodatki"
	salience 2
	
	when
		not Fakt(nazwa == "dodatek")
		Fakt(nazwa == "wybor", wartosc == Wybor.PORADA)
		dodatek : Dodatek()
		parser : Parser()
		baza : BazaWiedzy()
	then
		  dodatek.setMonit("Jaki dodatek powinna zawierać Twoja pizza?:\n");
		  dodatek.zadajPytanie();
		  parser.przetworzOdpowiedz();
		boolean found = false;
		for (String slowo : parser.getSlowaKluczowe()){
		    System.out.println("słowo " + slowo);
			for (String uriKlasy : baza.dopasujDodatek(slowo)) {
			    System.out.println("dopasowano :" + uriKlasy);
		        insert(new Fakt("dodatek", uriKlasy));
		        found = true;
		    }
		}
		if (!found) {
		    insert(new Fakt("dodatek", null));
		}
        update(dodatek);
end

rule "Podaj rodzaj ciasta"
	salience 2
	
	when
		not Fakt(nazwa == "rodzaj_ciasta")
		Fakt(nazwa == "wybor", wartosc == Wybor.PORADA)
		ciasto : Ciasto()
		parser : Parser()
	then
		  ciasto.setMonit("Podaj rodzaj ciasta:\n");
		  ciasto.zadajPytanie();
		  parser.przetworzOdpowiedz();

		boolean found = false;
		for (String slowo : parser.getSlowaKluczowe()){
			if (slowo.matches("cienk[ei]")){
			    found = true;
		        insert(new Fakt("rodzaj_ciasta", "cienkie"));
			} else if (slowo.matches("grub[ye]")) {
			    found = true;
		        insert(new Fakt("rodzaj_ciasta", "grube"));
			}
		}
		if (!found) {
            insert(new Fakt("rodzaj_ciasta", null));
        }
        update(ciasto);
end

rule "Polecana pizza"
	salience 1
	
	when
		Fakt(nazwa == "dodatek", dodatek: wartosc)
		Fakt(nazwa == "rodzaj_ciasta", ciasto: wartosc)
		not Fakt(nazwa == "pizza_propozycja")
		Fakt(nazwa == "wybor", wartosc == Wybor.PORADA)
        $dodatek : Fakt( nazwa == "dodatek")
		baza: BazaWiedzy()
		pizza: Pizza()
	then

		Set<String> pizze = baza.wyszukajPizzePoDodatkach($dodatek.getWartosc());
            
        if (pizze.size()>1){            		
			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
		    	if (!nazwaPizzy.equals("Nothing")){
		       	   System.out.println("Polecam pizzę:"+nazwaPizzy);
		       	}
		    }
		}
		else {
			System.out.println(pizza.getBrakDopasowania());
	    }

end

rule "Wybierz pizze"
    when
        Fakt(nazwa == "wybor", wartosc == Wybor.ZAMOWIENIE)
    then

    end

rule "Zamowienie pizzy"
    when
        Fakt(nazwa == "dodatek", dodatek: wartosc)
        Fakt(nazwa == "rodzaj_ciasta", ciasto: wartosc)
        Fakt(nazwa == "wybor", wartosc == Wybor.ZAMOWIENIE)
//        eval(dodatek == null || ciasto == null)
    then
        System.out.println("pizza gna i leci");

end


rule "zakończenie"

	when
		not (Fakt(nazwa == "koniec"))
		Fakt(nazwa == "pizza_propozycja") 

		zamowienie : Zamowienie()
	then
		insert(new Fakt("koniec", "0"));
		zamowienie.pozegnanie();
end

