package pl.poznan.put.cs.si.puttalky
 
import pl.poznan.put.cs.si.puttalky.model.*;
import pl.poznan.put.cs.si.puttalky.BazaWiedzy;
import java.util.Set
import java.util.Arrays
import java.util.stream.Collectors;
import java.util.HashSet


rule "start"
	salience 3
	
	when
		not Fakt(nazwa=="start")
		zamowienie : Zamowienie()
	then
		zamowienie.powitanie();
		System.out.println();
		System.out.println();
		insert(new Fakt("start", "0"));
end

rule "Podaj dodatki lub zloz zamowienie"
	salience 2
	
	when
		not Fakt(nazwa == "dodatek" || nazwa == "bezDodatku" || nazwa == "zlecenie")
		dodatek : Dodatek()
		parser : Parser()
		baza : BazaWiedzy()
	then
		  dodatek.setMonit("Na jaką pizzę masz ochotę?:\n");
		  dodatek.zadajPytanie();
		  parser.przetworzOdpowiedz();
		  Sentence sentence = parser.getSentence();

		  for (String nazwa: baza.lookForPizzas(sentence.getWith())) {
		      System.out.println("zlecenie na: " + nazwa);
		      insert(new Fakt("zlecenie", nazwa));
		  }

		  for (String uri: baza.matchExtras(sentence.getWith())) {
		      System.out.println("dodatek: " + uri);
		      insert(new Fakt("dodatek", uri));
		  }
		  for (String uri: baza.matchExtras(sentence.getWithout())) {
              System.out.println("bez dodatku: " + uri);
              insert(new Fakt("bezDodatku", uri));
          }
          update(dodatek);
end

rule "Podaj rodzaj ciasta"
	salience 2
	
	when
		not Fakt(nazwa == "rodzaj_ciasta")
		ciasto : Ciasto()
		parser : Parser()
	then
		  ciasto.setMonit("Podaj rodzaj ciasta:\n");
		  ciasto.zadajPytanie();
		  parser.przetworzOdpowiedz();

		for (String slowo : parser.getSentence().getWith()){
			if (slowo.matches("cienk[ei]")){
		        insert(new Fakt("rodzaj_ciasta", "cienkie"));
			} else if (slowo.matches("grub[ye]")) {
		        insert(new Fakt("rodzaj_ciasta", "grube"));
			}
		}
        update(ciasto);
end

rule "Polecana pizza"
	salience 1
	
	when
		Fakt(nazwa == "dodatek" || nazwa == "bezDodatku" || nazwa == "zlecenie", dodatek: wartosc)
		Fakt(nazwa == "rodzaj_ciasta", ciasto: wartosc)
		not Fakt(nazwa == "pizza_propozycja")
		baza: BazaWiedzy()
		pizza: Pizza()
		dodatki: HashSet() from collect( Fakt(nazwa == "dodatek"))
		bezDodatku: HashSet() from collect( Fakt(nazwa == "bezDodatku"))
		zlecenie: HashSet() from collect( Fakt(nazwa == "zlecenie"))
	then
		Set<String> pizze = baza.lookForPizzasByExtras(dodatki, bezDodatku, zlecenie);
        if (pizze.size()>1) {
			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
		    	if (Pizza.isPizza(nazwaPizzy)){
		       	   System.out.println("Polecam pizzę:"+nazwaPizzy);
		       	}
		    }
		}
		else {
            Set<String> extras = baza.getMatchingExtrasNames(dodatek);
            if (extras.isEmpty()) {
                System.out.println("Nie mamy takiego dodatku");
            } else {
                System.out.println("Nie mamy pizzy zawierającej `" +
                    extras.iterator().next() +
                    "` jednak możemy ją wykonać na specjalne zamówienie"
                );
            }
	    }

end

rule "zakończenie"

	when
		not (Fakt(nazwa == "koniec"))
		Fakt(nazwa == "pizza_propozycja") 

		zamowienie : Zamowienie()
	then
		insert(new Fakt("koniec", "0"));
		zamowienie.pozegnanie();
end

